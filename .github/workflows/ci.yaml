name: CI

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - 'docs/**'
      - 'README.md'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-22.04
    timeout-minutes: 2
    name: Lint
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54
          skip-cache: true

  test:
    runs-on: ubuntu-22.04
    timeout-minutes: 2
    name: Test
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run go mod tidy
        run: go mod tidy

      - name: Check for changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "go.mod and/or go.sum have changes after running go mod tidy. Please tidy your module."
            git diff
            exit 1
          fi

      - name: Run Tests
        run: go test -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check coverage
        id: coverage
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: $coverage%"
          minimum=99.9
          result=$(echo "$coverage >= $minimum" | bc)
          if [ "$result" -eq 0 ]; then
            echo "Coverage of $coverage% is below the minimum of $minimum%"
            exit 1
          fi

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
         token: ${{ secrets.CODECOV_TOKEN }}
         slug: itimky/spindle
         disable_search: true
         file: ./coverage.out
         dry_run: ${{ github.ref != 'refs/heads/master' }}
         fail_ci_if_error: true

  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    name: Build
    needs: [ lint, test ]
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: v0.12.1
          platforms: linux/arm64
          driver: docker-container

      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        id: go-build-cache
        with:
          path: go-build-cache
          key: go-build-cache-${{ hashFiles('go.mod') }}
          restore-keys: go-build-cache-

      - name: Inject Docker layers
        uses: reproducible-containers/buildkit-cache-dance@v2.1.4
        with:
          cache-source: go-build-cache
          cache-target: /root/.cache/go-build
          skip-extraction: ${{ steps.go-build-cache.outputs.cache-hit }}

      - name: Prepare tags
        run: |
          echo "SHORT_SHA=$(echo ${GITHUB_SHA::7})" >> $GITHUB_ENV
          echo "TIMESTAMP=$(date -u +%Y%m%d-%H%M%S)" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          tags: ghcr.io/${{ github.repository_owner }}/spindle:${{ env.SHORT_SHA }}-${{ env.TIMESTAMP }}
          platforms: linux/arm64
          provenance: false  # disable docker-specific metadata, leave OCI-compatible metadata only
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
