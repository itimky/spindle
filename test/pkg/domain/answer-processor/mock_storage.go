// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	answerprocessor "github.com/itimky/spindle/pkg/domain/answer-processor"

	mock "github.com/stretchr/testify/mock"
)

// Mockstorage is an autogenerated mock type for the storage type
type Mockstorage struct {
	mock.Mock
}

type Mockstorage_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockstorage) EXPECT() *Mockstorage_Expecter {
	return &Mockstorage_Expecter{mock: &_m.Mock}
}

// GetOtherPersonAnswers provides a mock function with given fields: ctx, params
func (_m *Mockstorage) GetOtherPersonAnswers(ctx context.Context, params answerprocessor.GetOtherPersonAnswersParams) (*answerprocessor.GetOtherPersonAnswersResult, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetOtherPersonAnswers")
	}

	var r0 *answerprocessor.GetOtherPersonAnswersResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, answerprocessor.GetOtherPersonAnswersParams) (*answerprocessor.GetOtherPersonAnswersResult, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, answerprocessor.GetOtherPersonAnswersParams) *answerprocessor.GetOtherPersonAnswersResult); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*answerprocessor.GetOtherPersonAnswersResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, answerprocessor.GetOtherPersonAnswersParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockstorage_GetOtherPersonAnswers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOtherPersonAnswers'
type Mockstorage_GetOtherPersonAnswers_Call struct {
	*mock.Call
}

// GetOtherPersonAnswers is a helper method to define mock.On call
//   - ctx context.Context
//   - params answerprocessor.GetOtherPersonAnswersParams
func (_e *Mockstorage_Expecter) GetOtherPersonAnswers(ctx interface{}, params interface{}) *Mockstorage_GetOtherPersonAnswers_Call {
	return &Mockstorage_GetOtherPersonAnswers_Call{Call: _e.mock.On("GetOtherPersonAnswers", ctx, params)}
}

func (_c *Mockstorage_GetOtherPersonAnswers_Call) Run(run func(ctx context.Context, params answerprocessor.GetOtherPersonAnswersParams)) *Mockstorage_GetOtherPersonAnswers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(answerprocessor.GetOtherPersonAnswersParams))
	})
	return _c
}

func (_c *Mockstorage_GetOtherPersonAnswers_Call) Return(_a0 *answerprocessor.GetOtherPersonAnswersResult, _a1 error) *Mockstorage_GetOtherPersonAnswers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockstorage_GetOtherPersonAnswers_Call) RunAndReturn(run func(context.Context, answerprocessor.GetOtherPersonAnswersParams) (*answerprocessor.GetOtherPersonAnswersResult, error)) *Mockstorage_GetOtherPersonAnswers_Call {
	_c.Call.Return(run)
	return _c
}

// GetWeightMatrix provides a mock function with given fields: ctx, params
func (_m *Mockstorage) GetWeightMatrix(ctx context.Context, params answerprocessor.GetWeightMatrixParams) (*answerprocessor.GetWeightMatrixResult, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetWeightMatrix")
	}

	var r0 *answerprocessor.GetWeightMatrixResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, answerprocessor.GetWeightMatrixParams) (*answerprocessor.GetWeightMatrixResult, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, answerprocessor.GetWeightMatrixParams) *answerprocessor.GetWeightMatrixResult); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*answerprocessor.GetWeightMatrixResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, answerprocessor.GetWeightMatrixParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Mockstorage_GetWeightMatrix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeightMatrix'
type Mockstorage_GetWeightMatrix_Call struct {
	*mock.Call
}

// GetWeightMatrix is a helper method to define mock.On call
//   - ctx context.Context
//   - params answerprocessor.GetWeightMatrixParams
func (_e *Mockstorage_Expecter) GetWeightMatrix(ctx interface{}, params interface{}) *Mockstorage_GetWeightMatrix_Call {
	return &Mockstorage_GetWeightMatrix_Call{Call: _e.mock.On("GetWeightMatrix", ctx, params)}
}

func (_c *Mockstorage_GetWeightMatrix_Call) Run(run func(ctx context.Context, params answerprocessor.GetWeightMatrixParams)) *Mockstorage_GetWeightMatrix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(answerprocessor.GetWeightMatrixParams))
	})
	return _c
}

func (_c *Mockstorage_GetWeightMatrix_Call) Return(_a0 *answerprocessor.GetWeightMatrixResult, _a1 error) *Mockstorage_GetWeightMatrix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Mockstorage_GetWeightMatrix_Call) RunAndReturn(run func(context.Context, answerprocessor.GetWeightMatrixParams) (*answerprocessor.GetWeightMatrixResult, error)) *Mockstorage_GetWeightMatrix_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePersonsWeights provides a mock function with given fields: ctx, params
func (_m *Mockstorage) UpdatePersonsWeights(ctx context.Context, params answerprocessor.UpdatePersonsWeightsParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePersonsWeights")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, answerprocessor.UpdatePersonsWeightsParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockstorage_UpdatePersonsWeights_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePersonsWeights'
type Mockstorage_UpdatePersonsWeights_Call struct {
	*mock.Call
}

// UpdatePersonsWeights is a helper method to define mock.On call
//   - ctx context.Context
//   - params answerprocessor.UpdatePersonsWeightsParams
func (_e *Mockstorage_Expecter) UpdatePersonsWeights(ctx interface{}, params interface{}) *Mockstorage_UpdatePersonsWeights_Call {
	return &Mockstorage_UpdatePersonsWeights_Call{Call: _e.mock.On("UpdatePersonsWeights", ctx, params)}
}

func (_c *Mockstorage_UpdatePersonsWeights_Call) Run(run func(ctx context.Context, params answerprocessor.UpdatePersonsWeightsParams)) *Mockstorage_UpdatePersonsWeights_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(answerprocessor.UpdatePersonsWeightsParams))
	})
	return _c
}

func (_c *Mockstorage_UpdatePersonsWeights_Call) Return(_a0 error) *Mockstorage_UpdatePersonsWeights_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockstorage_UpdatePersonsWeights_Call) RunAndReturn(run func(context.Context, answerprocessor.UpdatePersonsWeightsParams) error) *Mockstorage_UpdatePersonsWeights_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockstorage creates a new instance of Mockstorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockstorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockstorage {
	mock := &Mockstorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
