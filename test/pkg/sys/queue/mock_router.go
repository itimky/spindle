// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	queue "github.com/itimky/spindle/pkg/sys/queue"
)

// Mockrouter is an autogenerated mock type for the router type
type Mockrouter struct {
	mock.Mock
}

type Mockrouter_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockrouter) EXPECT() *Mockrouter_Expecter {
	return &Mockrouter_Expecter{mock: &_m.Mock}
}

// Routes provides a mock function with given fields:
func (_m *Mockrouter) Routes() map[queue.MessageType]queue.HandlerFunc {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Routes")
	}

	var r0 map[queue.MessageType]queue.HandlerFunc
	if rf, ok := ret.Get(0).(func() map[queue.MessageType]queue.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[queue.MessageType]queue.HandlerFunc)
		}
	}

	return r0
}

// Mockrouter_Routes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Routes'
type Mockrouter_Routes_Call struct {
	*mock.Call
}

// Routes is a helper method to define mock.On call
func (_e *Mockrouter_Expecter) Routes() *Mockrouter_Routes_Call {
	return &Mockrouter_Routes_Call{Call: _e.mock.On("Routes")}
}

func (_c *Mockrouter_Routes_Call) Run(run func()) *Mockrouter_Routes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Mockrouter_Routes_Call) Return(_a0 map[queue.MessageType]queue.HandlerFunc) *Mockrouter_Routes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockrouter_Routes_Call) RunAndReturn(run func() map[queue.MessageType]queue.HandlerFunc) *Mockrouter_Routes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockrouter creates a new instance of Mockrouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockrouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockrouter {
	mock := &Mockrouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
