// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	queue "github.com/itimky/spindle/pkg/sys/queue"
)

// Mockbootstrapper is an autogenerated mock type for the bootstrapper type
type Mockbootstrapper struct {
	mock.Mock
}

type Mockbootstrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockbootstrapper) EXPECT() *Mockbootstrapper_Expecter {
	return &Mockbootstrapper_Expecter{mock: &_m.Mock}
}

// Bootstrap provides a mock function with given fields: ctx, msgs
func (_m *Mockbootstrapper) Bootstrap(ctx context.Context, msgs []queue.Message) error {
	ret := _m.Called(ctx, msgs)

	if len(ret) == 0 {
		panic("no return value specified for Bootstrap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []queue.Message) error); ok {
		r0 = rf(ctx, msgs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockbootstrapper_Bootstrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bootstrap'
type Mockbootstrapper_Bootstrap_Call struct {
	*mock.Call
}

// Bootstrap is a helper method to define mock.On call
//   - ctx context.Context
//   - msgs []queue.Message
func (_e *Mockbootstrapper_Expecter) Bootstrap(ctx interface{}, msgs interface{}) *Mockbootstrapper_Bootstrap_Call {
	return &Mockbootstrapper_Bootstrap_Call{Call: _e.mock.On("Bootstrap", ctx, msgs)}
}

func (_c *Mockbootstrapper_Bootstrap_Call) Run(run func(ctx context.Context, msgs []queue.Message)) *Mockbootstrapper_Bootstrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]queue.Message))
	})
	return _c
}

func (_c *Mockbootstrapper_Bootstrap_Call) Return(_a0 error) *Mockbootstrapper_Bootstrap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockbootstrapper_Bootstrap_Call) RunAndReturn(run func(context.Context, []queue.Message) error) *Mockbootstrapper_Bootstrap_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbootstrapper creates a new instance of Mockbootstrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbootstrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockbootstrapper {
	mock := &Mockbootstrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
