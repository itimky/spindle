// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	sarama "github.com/IBM/sarama"
)

// MockpartitionConsumerSarama is an autogenerated mock type for the partitionConsumerSarama type
type MockpartitionConsumerSarama struct {
	mock.Mock
}

type MockpartitionConsumerSarama_Expecter struct {
	mock *mock.Mock
}

func (_m *MockpartitionConsumerSarama) EXPECT() *MockpartitionConsumerSarama_Expecter {
	return &MockpartitionConsumerSarama_Expecter{mock: &_m.Mock}
}

// Errors provides a mock function with given fields:
func (_m *MockpartitionConsumerSarama) Errors() <-chan *sarama.ConsumerError {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Errors")
	}

	var r0 <-chan *sarama.ConsumerError
	if rf, ok := ret.Get(0).(func() <-chan *sarama.ConsumerError); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *sarama.ConsumerError)
		}
	}

	return r0
}

// MockpartitionConsumerSarama_Errors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Errors'
type MockpartitionConsumerSarama_Errors_Call struct {
	*mock.Call
}

// Errors is a helper method to define mock.On call
func (_e *MockpartitionConsumerSarama_Expecter) Errors() *MockpartitionConsumerSarama_Errors_Call {
	return &MockpartitionConsumerSarama_Errors_Call{Call: _e.mock.On("Errors")}
}

func (_c *MockpartitionConsumerSarama_Errors_Call) Run(run func()) *MockpartitionConsumerSarama_Errors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockpartitionConsumerSarama_Errors_Call) Return(_a0 <-chan *sarama.ConsumerError) *MockpartitionConsumerSarama_Errors_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockpartitionConsumerSarama_Errors_Call) RunAndReturn(run func() <-chan *sarama.ConsumerError) *MockpartitionConsumerSarama_Errors_Call {
	_c.Call.Return(run)
	return _c
}

// HighWaterMarkOffset provides a mock function with given fields:
func (_m *MockpartitionConsumerSarama) HighWaterMarkOffset() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HighWaterMarkOffset")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockpartitionConsumerSarama_HighWaterMarkOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HighWaterMarkOffset'
type MockpartitionConsumerSarama_HighWaterMarkOffset_Call struct {
	*mock.Call
}

// HighWaterMarkOffset is a helper method to define mock.On call
func (_e *MockpartitionConsumerSarama_Expecter) HighWaterMarkOffset() *MockpartitionConsumerSarama_HighWaterMarkOffset_Call {
	return &MockpartitionConsumerSarama_HighWaterMarkOffset_Call{Call: _e.mock.On("HighWaterMarkOffset")}
}

func (_c *MockpartitionConsumerSarama_HighWaterMarkOffset_Call) Run(run func()) *MockpartitionConsumerSarama_HighWaterMarkOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockpartitionConsumerSarama_HighWaterMarkOffset_Call) Return(_a0 int64) *MockpartitionConsumerSarama_HighWaterMarkOffset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockpartitionConsumerSarama_HighWaterMarkOffset_Call) RunAndReturn(run func() int64) *MockpartitionConsumerSarama_HighWaterMarkOffset_Call {
	_c.Call.Return(run)
	return _c
}

// Messages provides a mock function with given fields:
func (_m *MockpartitionConsumerSarama) Messages() <-chan *sarama.ConsumerMessage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Messages")
	}

	var r0 <-chan *sarama.ConsumerMessage
	if rf, ok := ret.Get(0).(func() <-chan *sarama.ConsumerMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *sarama.ConsumerMessage)
		}
	}

	return r0
}

// MockpartitionConsumerSarama_Messages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Messages'
type MockpartitionConsumerSarama_Messages_Call struct {
	*mock.Call
}

// Messages is a helper method to define mock.On call
func (_e *MockpartitionConsumerSarama_Expecter) Messages() *MockpartitionConsumerSarama_Messages_Call {
	return &MockpartitionConsumerSarama_Messages_Call{Call: _e.mock.On("Messages")}
}

func (_c *MockpartitionConsumerSarama_Messages_Call) Run(run func()) *MockpartitionConsumerSarama_Messages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockpartitionConsumerSarama_Messages_Call) Return(_a0 <-chan *sarama.ConsumerMessage) *MockpartitionConsumerSarama_Messages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockpartitionConsumerSarama_Messages_Call) RunAndReturn(run func() <-chan *sarama.ConsumerMessage) *MockpartitionConsumerSarama_Messages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockpartitionConsumerSarama creates a new instance of MockpartitionConsumerSarama. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockpartitionConsumerSarama(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockpartitionConsumerSarama {
	mock := &MockpartitionConsumerSarama{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
