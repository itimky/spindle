// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	answerprocessor "github.com/itimky/spindle/pkg/domain/answer-processor"

	mock "github.com/stretchr/testify/mock"
)

// MockanswerProcessor is an autogenerated mock type for the answerProcessor type
type MockanswerProcessor struct {
	mock.Mock
}

type MockanswerProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockanswerProcessor) EXPECT() *MockanswerProcessor_Expecter {
	return &MockanswerProcessor_Expecter{mock: &_m.Mock}
}

// ProcessAnswer provides a mock function with given fields: ctx, params
func (_m *MockanswerProcessor) ProcessAnswer(ctx context.Context, params answerprocessor.ProcessAnswerParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ProcessAnswer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, answerprocessor.ProcessAnswerParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockanswerProcessor_ProcessAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessAnswer'
type MockanswerProcessor_ProcessAnswer_Call struct {
	*mock.Call
}

// ProcessAnswer is a helper method to define mock.On call
//   - ctx context.Context
//   - params answerprocessor.ProcessAnswerParams
func (_e *MockanswerProcessor_Expecter) ProcessAnswer(ctx interface{}, params interface{}) *MockanswerProcessor_ProcessAnswer_Call {
	return &MockanswerProcessor_ProcessAnswer_Call{Call: _e.mock.On("ProcessAnswer", ctx, params)}
}

func (_c *MockanswerProcessor_ProcessAnswer_Call) Run(run func(ctx context.Context, params answerprocessor.ProcessAnswerParams)) *MockanswerProcessor_ProcessAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(answerprocessor.ProcessAnswerParams))
	})
	return _c
}

func (_c *MockanswerProcessor_ProcessAnswer_Call) Return(_a0 error) *MockanswerProcessor_ProcessAnswer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockanswerProcessor_ProcessAnswer_Call) RunAndReturn(run func(context.Context, answerprocessor.ProcessAnswerParams) error) *MockanswerProcessor_ProcessAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockanswerProcessor creates a new instance of MockanswerProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockanswerProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockanswerProcessor {
	mock := &MockanswerProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
