// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Mockreadiness is an autogenerated mock type for the readiness type
type Mockreadiness struct {
	mock.Mock
}

type Mockreadiness_Expecter struct {
	mock *mock.Mock
}

func (_m *Mockreadiness) EXPECT() *Mockreadiness_Expecter {
	return &Mockreadiness_Expecter{mock: &_m.Mock}
}

// MarkReady provides a mock function with given fields: ctx
func (_m *Mockreadiness) MarkReady(ctx context.Context) {
	_m.Called(ctx)
}

// Mockreadiness_MarkReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkReady'
type Mockreadiness_MarkReady_Call struct {
	*mock.Call
}

// MarkReady is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Mockreadiness_Expecter) MarkReady(ctx interface{}) *Mockreadiness_MarkReady_Call {
	return &Mockreadiness_MarkReady_Call{Call: _e.mock.On("MarkReady", ctx)}
}

func (_c *Mockreadiness_MarkReady_Call) Run(run func(ctx context.Context)) *Mockreadiness_MarkReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Mockreadiness_MarkReady_Call) Return() *Mockreadiness_MarkReady_Call {
	_c.Call.Return()
	return _c
}

func (_c *Mockreadiness_MarkReady_Call) RunAndReturn(run func(context.Context)) *Mockreadiness_MarkReady_Call {
	_c.Call.Return(run)
	return _c
}

// WaitReady provides a mock function with given fields: ctx
func (_m *Mockreadiness) WaitReady(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitReady")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mockreadiness_WaitReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitReady'
type Mockreadiness_WaitReady_Call struct {
	*mock.Call
}

// WaitReady is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Mockreadiness_Expecter) WaitReady(ctx interface{}) *Mockreadiness_WaitReady_Call {
	return &Mockreadiness_WaitReady_Call{Call: _e.mock.On("WaitReady", ctx)}
}

func (_c *Mockreadiness_WaitReady_Call) Run(run func(ctx context.Context)) *Mockreadiness_WaitReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Mockreadiness_WaitReady_Call) Return(_a0 error) *Mockreadiness_WaitReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mockreadiness_WaitReady_Call) RunAndReturn(run func(context.Context) error) *Mockreadiness_WaitReady_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockreadiness creates a new instance of Mockreadiness. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockreadiness(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mockreadiness {
	mock := &Mockreadiness{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
