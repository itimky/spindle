// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockrwLocker is an autogenerated mock type for the rwLocker type
type MockrwLocker struct {
	mock.Mock
}

type MockrwLocker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockrwLocker) EXPECT() *MockrwLocker_Expecter {
	return &MockrwLocker_Expecter{mock: &_m.Mock}
}

// Lock provides a mock function with given fields:
func (_m *MockrwLocker) Lock() {
	_m.Called()
}

// MockrwLocker_Lock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lock'
type MockrwLocker_Lock_Call struct {
	*mock.Call
}

// Lock is a helper method to define mock.On call
func (_e *MockrwLocker_Expecter) Lock() *MockrwLocker_Lock_Call {
	return &MockrwLocker_Lock_Call{Call: _e.mock.On("Lock")}
}

func (_c *MockrwLocker_Lock_Call) Run(run func()) *MockrwLocker_Lock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockrwLocker_Lock_Call) Return() *MockrwLocker_Lock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockrwLocker_Lock_Call) RunAndReturn(run func()) *MockrwLocker_Lock_Call {
	_c.Call.Return(run)
	return _c
}

// RLock provides a mock function with given fields:
func (_m *MockrwLocker) RLock() {
	_m.Called()
}

// MockrwLocker_RLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RLock'
type MockrwLocker_RLock_Call struct {
	*mock.Call
}

// RLock is a helper method to define mock.On call
func (_e *MockrwLocker_Expecter) RLock() *MockrwLocker_RLock_Call {
	return &MockrwLocker_RLock_Call{Call: _e.mock.On("RLock")}
}

func (_c *MockrwLocker_RLock_Call) Run(run func()) *MockrwLocker_RLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockrwLocker_RLock_Call) Return() *MockrwLocker_RLock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockrwLocker_RLock_Call) RunAndReturn(run func()) *MockrwLocker_RLock_Call {
	_c.Call.Return(run)
	return _c
}

// RUnlock provides a mock function with given fields:
func (_m *MockrwLocker) RUnlock() {
	_m.Called()
}

// MockrwLocker_RUnlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RUnlock'
type MockrwLocker_RUnlock_Call struct {
	*mock.Call
}

// RUnlock is a helper method to define mock.On call
func (_e *MockrwLocker_Expecter) RUnlock() *MockrwLocker_RUnlock_Call {
	return &MockrwLocker_RUnlock_Call{Call: _e.mock.On("RUnlock")}
}

func (_c *MockrwLocker_RUnlock_Call) Run(run func()) *MockrwLocker_RUnlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockrwLocker_RUnlock_Call) Return() *MockrwLocker_RUnlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockrwLocker_RUnlock_Call) RunAndReturn(run func()) *MockrwLocker_RUnlock_Call {
	_c.Call.Return(run)
	return _c
}

// Unlock provides a mock function with given fields:
func (_m *MockrwLocker) Unlock() {
	_m.Called()
}

// MockrwLocker_Unlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unlock'
type MockrwLocker_Unlock_Call struct {
	*mock.Call
}

// Unlock is a helper method to define mock.On call
func (_e *MockrwLocker_Expecter) Unlock() *MockrwLocker_Unlock_Call {
	return &MockrwLocker_Unlock_Call{Call: _e.mock.On("Unlock")}
}

func (_c *MockrwLocker_Unlock_Call) Run(run func()) *MockrwLocker_Unlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockrwLocker_Unlock_Call) Return() *MockrwLocker_Unlock_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockrwLocker_Unlock_Call) RunAndReturn(run func()) *MockrwLocker_Unlock_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockrwLocker creates a new instance of MockrwLocker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockrwLocker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockrwLocker {
	mock := &MockrwLocker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
