// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// MockConsumerGroupSession is an autogenerated mock type for the ConsumerGroupSession type
type MockConsumerGroupSession struct {
	mock.Mock
}

type MockConsumerGroupSession_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConsumerGroupSession) EXPECT() *MockConsumerGroupSession_Expecter {
	return &MockConsumerGroupSession_Expecter{mock: &_m.Mock}
}

// Claims provides a mock function with given fields:
func (_m *MockConsumerGroupSession) Claims() map[string][]int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Claims")
	}

	var r0 map[string][]int32
	if rf, ok := ret.Get(0).(func() map[string][]int32); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]int32)
		}
	}

	return r0
}

// MockConsumerGroupSession_Claims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Claims'
type MockConsumerGroupSession_Claims_Call struct {
	*mock.Call
}

// Claims is a helper method to define mock.On call
func (_e *MockConsumerGroupSession_Expecter) Claims() *MockConsumerGroupSession_Claims_Call {
	return &MockConsumerGroupSession_Claims_Call{Call: _e.mock.On("Claims")}
}

func (_c *MockConsumerGroupSession_Claims_Call) Run(run func()) *MockConsumerGroupSession_Claims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerGroupSession_Claims_Call) Return(_a0 map[string][]int32) *MockConsumerGroupSession_Claims_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerGroupSession_Claims_Call) RunAndReturn(run func() map[string][]int32) *MockConsumerGroupSession_Claims_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields:
func (_m *MockConsumerGroupSession) Commit() {
	_m.Called()
}

// MockConsumerGroupSession_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockConsumerGroupSession_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockConsumerGroupSession_Expecter) Commit() *MockConsumerGroupSession_Commit_Call {
	return &MockConsumerGroupSession_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockConsumerGroupSession_Commit_Call) Run(run func()) *MockConsumerGroupSession_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerGroupSession_Commit_Call) Return() *MockConsumerGroupSession_Commit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumerGroupSession_Commit_Call) RunAndReturn(run func()) *MockConsumerGroupSession_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Context provides a mock function with given fields:
func (_m *MockConsumerGroupSession) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockConsumerGroupSession_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type MockConsumerGroupSession_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
func (_e *MockConsumerGroupSession_Expecter) Context() *MockConsumerGroupSession_Context_Call {
	return &MockConsumerGroupSession_Context_Call{Call: _e.mock.On("Context")}
}

func (_c *MockConsumerGroupSession_Context_Call) Run(run func()) *MockConsumerGroupSession_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerGroupSession_Context_Call) Return(_a0 context.Context) *MockConsumerGroupSession_Context_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerGroupSession_Context_Call) RunAndReturn(run func() context.Context) *MockConsumerGroupSession_Context_Call {
	_c.Call.Return(run)
	return _c
}

// GenerationID provides a mock function with given fields:
func (_m *MockConsumerGroupSession) GenerationID() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerationID")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// MockConsumerGroupSession_GenerationID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerationID'
type MockConsumerGroupSession_GenerationID_Call struct {
	*mock.Call
}

// GenerationID is a helper method to define mock.On call
func (_e *MockConsumerGroupSession_Expecter) GenerationID() *MockConsumerGroupSession_GenerationID_Call {
	return &MockConsumerGroupSession_GenerationID_Call{Call: _e.mock.On("GenerationID")}
}

func (_c *MockConsumerGroupSession_GenerationID_Call) Run(run func()) *MockConsumerGroupSession_GenerationID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerGroupSession_GenerationID_Call) Return(_a0 int32) *MockConsumerGroupSession_GenerationID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerGroupSession_GenerationID_Call) RunAndReturn(run func() int32) *MockConsumerGroupSession_GenerationID_Call {
	_c.Call.Return(run)
	return _c
}

// MarkMessage provides a mock function with given fields: msg, metadata
func (_m *MockConsumerGroupSession) MarkMessage(msg *sarama.ConsumerMessage, metadata string) {
	_m.Called(msg, metadata)
}

// MockConsumerGroupSession_MarkMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkMessage'
type MockConsumerGroupSession_MarkMessage_Call struct {
	*mock.Call
}

// MarkMessage is a helper method to define mock.On call
//   - msg *sarama.ConsumerMessage
//   - metadata string
func (_e *MockConsumerGroupSession_Expecter) MarkMessage(msg interface{}, metadata interface{}) *MockConsumerGroupSession_MarkMessage_Call {
	return &MockConsumerGroupSession_MarkMessage_Call{Call: _e.mock.On("MarkMessage", msg, metadata)}
}

func (_c *MockConsumerGroupSession_MarkMessage_Call) Run(run func(msg *sarama.ConsumerMessage, metadata string)) *MockConsumerGroupSession_MarkMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*sarama.ConsumerMessage), args[1].(string))
	})
	return _c
}

func (_c *MockConsumerGroupSession_MarkMessage_Call) Return() *MockConsumerGroupSession_MarkMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumerGroupSession_MarkMessage_Call) RunAndReturn(run func(*sarama.ConsumerMessage, string)) *MockConsumerGroupSession_MarkMessage_Call {
	_c.Call.Return(run)
	return _c
}

// MarkOffset provides a mock function with given fields: topic, partition, offset, metadata
func (_m *MockConsumerGroupSession) MarkOffset(topic string, partition int32, offset int64, metadata string) {
	_m.Called(topic, partition, offset, metadata)
}

// MockConsumerGroupSession_MarkOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkOffset'
type MockConsumerGroupSession_MarkOffset_Call struct {
	*mock.Call
}

// MarkOffset is a helper method to define mock.On call
//   - topic string
//   - partition int32
//   - offset int64
//   - metadata string
func (_e *MockConsumerGroupSession_Expecter) MarkOffset(topic interface{}, partition interface{}, offset interface{}, metadata interface{}) *MockConsumerGroupSession_MarkOffset_Call {
	return &MockConsumerGroupSession_MarkOffset_Call{Call: _e.mock.On("MarkOffset", topic, partition, offset, metadata)}
}

func (_c *MockConsumerGroupSession_MarkOffset_Call) Run(run func(topic string, partition int32, offset int64, metadata string)) *MockConsumerGroupSession_MarkOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int32), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *MockConsumerGroupSession_MarkOffset_Call) Return() *MockConsumerGroupSession_MarkOffset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumerGroupSession_MarkOffset_Call) RunAndReturn(run func(string, int32, int64, string)) *MockConsumerGroupSession_MarkOffset_Call {
	_c.Call.Return(run)
	return _c
}

// MemberID provides a mock function with given fields:
func (_m *MockConsumerGroupSession) MemberID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MemberID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConsumerGroupSession_MemberID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MemberID'
type MockConsumerGroupSession_MemberID_Call struct {
	*mock.Call
}

// MemberID is a helper method to define mock.On call
func (_e *MockConsumerGroupSession_Expecter) MemberID() *MockConsumerGroupSession_MemberID_Call {
	return &MockConsumerGroupSession_MemberID_Call{Call: _e.mock.On("MemberID")}
}

func (_c *MockConsumerGroupSession_MemberID_Call) Run(run func()) *MockConsumerGroupSession_MemberID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConsumerGroupSession_MemberID_Call) Return(_a0 string) *MockConsumerGroupSession_MemberID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConsumerGroupSession_MemberID_Call) RunAndReturn(run func() string) *MockConsumerGroupSession_MemberID_Call {
	_c.Call.Return(run)
	return _c
}

// ResetOffset provides a mock function with given fields: topic, partition, offset, metadata
func (_m *MockConsumerGroupSession) ResetOffset(topic string, partition int32, offset int64, metadata string) {
	_m.Called(topic, partition, offset, metadata)
}

// MockConsumerGroupSession_ResetOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetOffset'
type MockConsumerGroupSession_ResetOffset_Call struct {
	*mock.Call
}

// ResetOffset is a helper method to define mock.On call
//   - topic string
//   - partition int32
//   - offset int64
//   - metadata string
func (_e *MockConsumerGroupSession_Expecter) ResetOffset(topic interface{}, partition interface{}, offset interface{}, metadata interface{}) *MockConsumerGroupSession_ResetOffset_Call {
	return &MockConsumerGroupSession_ResetOffset_Call{Call: _e.mock.On("ResetOffset", topic, partition, offset, metadata)}
}

func (_c *MockConsumerGroupSession_ResetOffset_Call) Run(run func(topic string, partition int32, offset int64, metadata string)) *MockConsumerGroupSession_ResetOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int32), args[2].(int64), args[3].(string))
	})
	return _c
}

func (_c *MockConsumerGroupSession_ResetOffset_Call) Return() *MockConsumerGroupSession_ResetOffset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConsumerGroupSession_ResetOffset_Call) RunAndReturn(run func(string, int32, int64, string)) *MockConsumerGroupSession_ResetOffset_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConsumerGroupSession creates a new instance of MockConsumerGroupSession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumerGroupSession(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumerGroupSession {
	mock := &MockConsumerGroupSession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
